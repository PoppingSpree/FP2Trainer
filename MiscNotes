LAST LEFT OFF ON: 
> dump vars and components on all players to file for comparing.
> RNG Mitigation https://www.gamedeveloper.com/programming/implementing-a-replay-system-in-unity-and-how-i-d-do-it-differently-next-time
> hook FPStage and force the time and frametime to a fake 60fps value, then do replays based on step number not time.

> Fix additionally-spawned characters not reacting to gimmicks properly.
> Want to add tidy menus
> Custom viewpages
> Twitch Plays FP2? https://github.com/TwitchLib/TwitchLib.Unity
> Example of Custom Level
> Example of Custom NPC
> Make Merga / Gong / Cory / Spade playable
> Remember to purge null objects from goNameTags

> Remember to investigate FPPlayer's swapCharacter field: // 	swapCharacter	{Player Bike Carol (FPPlayer)}	FPPlayer


> As of 1.1.4r, there are 86 references to GetPlayerInstance_FPPlayer()
> As of 1.1.4r, there are 24 references to GetPlayerInstance()

> Make "Get Out" actually work.

> lots and lots of testing and bugfixing.


----

public static T InstantiateFPBaseObject<T>(T original, out bool stageListPosValidated) where T : UnityEngine.Object
Part of InstantiateFPBaseObject's responsibilities is to register the classID and pass that value back to the script&GameObject that instantiated it. From there, CreateStageObject is expecting to have the static Thingy.classID passed in as the first parameter to increase the stack of items of that type.
immediately after being called, it sets the stageListValidation which will be handed back out as an out argument. stageListPosValidated = FPStage.ProcessInstantiatedFPBaseObjectValidation<T>(t);

okay it looks like this validation thing is really important
flag = FPStage.ValidateStageListPos(fpbaseObject) && flag; at this poiint, the base object is a down converted version of whatever we cloned from the instantiation call.
It is impossible to validate on the initial creation because the stage objects created flag is flase. So it has to be called again later with this same object to get its list position validated...
If it's already valid when passed in, it'll return true. If it's not valid, it'll try to get a a new spawnlist position via 
currentStage.stageObjSpawnPos = GetFreeSpawnPos(currentStage.stageObjSpawnPos);
. If there's free room, the objects listPos is set, to the free slot's index, and that slot in the stageObjectList is set to the FPBaseObject that was passed in.

And if we've run out of spawn positions, there will be debug logs warning that an object will be removed from the list to make room.



----
^\d+\|[\d\.]+\|\d+
----
should probably do some kind of enum flag thing like with the inputs to reduce data throughput for sending these commands over net.

CMD_NETID|connectionID|displayName|charID [example -> ]1111_1111|4|"coryfan34"|1]
step|CMD_SPAWN|
step|CMD_HURT|dmg (or new health val)
step|CMD_HEAL|dmg (or new health val)
step|CMD_SCENE|SceneName
step|CMD_SYNC|timeOffset
step|posrot|1.0f|1.0f,|1.0f|0|0|0|0


Remember to patch around RestorePlayerInput
------------

// Snippet used to do a loop across all objects of a type. For example, every object checking against a spring.
while (FPStage.ForEach(FPPlayer.classID, objRef))



MonoBehaviors

FPBaseObject: Every active FP game object is based on this. Player, Enemy, Boss, or otherwise. Because of this, if you can achieve everything you need with this type, you can downcast those other types and use this.
FPPlayer: Handles implemention of character actions and state machines.
FPStage: Basically the "director" of gameplay, it controls the camera, it keeps track of the player, bosses, game state and is responsible for calling for most save/load data.
PlayerSpawnPoint: Has all the properties for spawning in a player after the FPStage starts, as well as setting debug mode flags for the character and the position the character will be placed at.

Stage Setup: This is the Game Object that will contain the FPStage script and is necessary for stages to function.

---


private void OnDrawGizmos()
	{
		Gizmos.color = new Color(0f, 0f, 0f, 0.25f);
		Gizmos.DrawCube(base.transform.position, new Vector3(32f, 32f, 1f));
	}
--

If "pf" is at the front of a name, it's probably short for "Prefab". Feel free to copy these references.
	
	
	
--
a 12 frame windup on actions gives plenty of room for network communication while still looking kinda convincing... but might not work for FP.

--

/*
if (value.StartsWith("Shift+"))
{
    value = value.Substring(6);
    keyModifier |= KeyModifier.Shift;
    continue;
}
---

public override float getInputDown(bool exactKeyModifiers = false, string axis = "", InputDevice device = InputDevice.Any)
	{
		if ((device != 0 && device != InputDevice.KeyboardAndMouse) || !checkModifiersForKeys(exactKeyModifiers))
*/

checkModifiersForKeys // probablyh wanna pass in true

---


fppausemenu 
this is the bit where it reacts to the chosen option:

else if (FPStage.menuInput.confirm)
				{
					timer = 0f;
					switch (menuSelection)
---
					
menuCursor
----

public FPObjectState inputMethod;
// In FPEventSequence
targetPlayer.inputMethod = targetPlayer.GetInputFromPlayer1;

---

public static List<FPPlayer> FindFPPlayers(bool includeInactivePlayers)

