LAST LEFT OFF ON: 
> NEed to write code to parse .ghost back to a queue. 
> Need to add play ID and level to header.
> Repurpose the "has saved" flag to only add the header once?

> Want to add splitscreen
> Want to add tidy menu

^\d+\|[\d\.]+\|\d+







MonoBehaviors

FPBaseObject: Every active FP game object is based on this. Player, Enemy, Boss, or otherwise. Because of this, if you can achieve everything you need with this type, you can downcast those other types and use this.
FPPlayer: Handles implemention of character actions and state machines.
FPStage: Basically the "director" of gameplay, it controls the camera, it keeps track of the player, bosses, game state and is responsible for calling for most save/load data.
PlayerSpawnPoint: Has all the properties for spawning in a player after the FPStage starts, as well as setting debug mode flags for the character and the position the character will be placed at.

Stage Setup: This is the Game Object that will contain the FPStage script and is necessary for stages to function.

---


private void OnDrawGizmos()
	{
		Gizmos.color = new Color(0f, 0f, 0f, 0.25f);
		Gizmos.DrawCube(base.transform.position, new Vector3(32f, 32f, 1f));
	}
--

If "pf" is at the front of a name, it's probably short for "Prefab". Feel free to copy these references.
	
	
	
--
a 12 frame windup on actions gives plenty of room for network communication while still looking kinda convincing... but might not work for FP.

--

/*
if (value.StartsWith("Shift+"))
{
    value = value.Substring(6);
    keyModifier |= KeyModifier.Shift;
    continue;
}
---

public override float getInputDown(bool exactKeyModifiers = false, string axis = "", InputDevice device = InputDevice.Any)
	{
		if ((device != 0 && device != InputDevice.KeyboardAndMouse) || !checkModifiersForKeys(exactKeyModifiers))
*/

checkModifiersForKeys // probablyh wanna pass in true

---


fppausemenu 
this is the bit where it reacts to the chosen option:

else if (FPStage.menuInput.confirm)
				{
					timer = 0f;
					switch (menuSelection)
---
					
menuCursor
----

public FPObjectState inputMethod;
// In FPEventSequence
targetPlayer.inputMethod = targetPlayer.GetInputFromPlayer1;

---

public static List<FPPlayer> FindFPPlayers(bool includeInactivePlayers)

